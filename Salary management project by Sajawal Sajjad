Group Leader:Sajawal Sajjad F21BSEEN1E02037
https://github.com/Sajawal-Sajjad/Salary-management-project-by-Sajawal-/tree/main
Group Members:-
Maryam Bibi F21BSEEN1E02040: https://github.com/mrymch1753/Salery-Managment-System-By-Maryam
Nauman Haider F21BSEEN1E02035: https://github.com/Noman-Haider/Salary-management-system/blob/main/README.md
Shoaib Ahmad F21BSEEN1E02039: https://github.com/ShoaibIUB/Shoaib-Ahmad-F21BSEEN1E02039

import tkinter as tk
from tkinter import ttk, messagebox
import requests

class SalaryManagementSystem:
    def __init__(self, root):
        self.root = root
        self.root.title("Salary Management System")

        # Treeview to display employee data
        self.tree = ttk.Treeview(self.root, columns=('ID', 'Name', 'Position', 'Hours Worked', 'Net Salary'), show='headings')
        self.tree.heading('ID', text='ID')
        self.tree.heading('Name', text='Name')
        self.tree.heading('Position', text='Position')
        self.tree.heading('Hours Worked', text='Hours Worked')
        self.tree.heading('Net Salary', text='Net Salary')
        self.tree.pack()

        # Entry fields for adding new employee
        self.name_label = tk.Label(root, text="Employee Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(root)
        self.name_entry.pack()

        self.position_label = tk.Label(root, text="Position:")
        self.position_label.pack()
        self.position_var = tk.StringVar()
        self.position_var.set("Software Developer")  # Default position
        self.position_dropdown = tk.OptionMenu(root, self.position_var, "Software Developer", "Manager", "Intern")
        self.position_dropdown.pack()

        self.hours_worked_label = tk.Label(root, text="Hours Worked:")
        self.hours_worked_label.pack()
        self.hours_worked_entry = tk.Entry(root)
        self.hours_worked_entry.pack()

        self.bill_type_label = tk.Label(root, text="Bill Type:")
        self.bill_type_label.pack()
        self.bill_type_entry = tk.Entry(root)
        self.bill_type_entry.pack()

        self.bill_amount_label = tk.Label(root, text="Bill Amount:")
        self.bill_amount_label.pack()
        self.bill_amount_entry = tk.Entry(root)
        self.bill_amount_entry.pack()

        # Button to calculate salary and add employee
        self.calculate_button = tk.Button(root, text="Calculate Salary", command=self.calculate_and_add_employee)
        self.calculate_button.pack()

        # Button to refresh the employee data in Treeview
        self.refresh_button = tk.Button(root, text='Refresh', command=self.refresh_data)
        self.refresh_button.pack()

    def calculate_and_add_employee(self):
        try:
            employee_name = self.name_entry.get()
            position = self.position_var.get()
            hours_worked = float(self.hours_worked_entry.get())

            # Define salary configuration templates based on position
            salary_templates = {
                "Software Developer": {"hourly_rate": 30, "bonus": 500},
                "Manager": {"hourly_rate": 40, "bonus": 1000},
                "Intern": {"hourly_rate": 15, "bonus": 100}
            }

            # Get the salary template for the selected position
            template = salary_templates.get(position)

            if template:
                hourly_rate = template["hourly_rate"]
                bonus = template["bonus"]
                salary = hours_worked * hourly_rate + bonus

                # Get bills information
                bill_type = self.bill_type_entry.get()
                bill_amount = float(self.bill_amount_entry.get()) if self.bill_amount_entry.get() else 0

                # Calculate net salary by deducting bills
                net_salary = salary - bill_amount

                # Make API call to store employee details
                api_url = 'http://127.0.0.1:5000/calculate_salary'
                payload = {
                    'name': employee_name,
                    'position': position,
                    'hours_worked': hours_worked,
                    'bill_type': bill_type,
                    'bill_amount': bill_amount,
                    'salary': salary,
                    'net_salary': net_salary
                }
                response = requests.post(api_url, json=payload)

                if response.status_code == 201:
                    messagebox.showinfo("Salary Details", f"Employee: {employee_name}\n"
                                                          f"Position: {position}\n"
                                                          f"Hours Worked: {hours_worked}\n"
                                                          f"Hourly Rate: {hourly_rate}\n"
                                                          f"Bonus: {bonus}\n"
                                                          f"Bills - {bill_type}: {bill_amount}\n"
                                                          f"Salary: {salary}\n"
                                                          f"Net Salary: {net_salary}")
                else:
                    messagebox.showerror("Error", "Failed to store salary details.")
            else:
                messagebox.showerror("Error", "Invalid position selected.")
        except ValueError:
            messagebox.showerror("Error", "Please enter valid numeric values for Hours Worked and Bill Amount.")

    def refresh_data(self):
        self.tree.delete(*self.tree.get_children())
        response = requests.get('http://127.0.0.1:5000/employees')
        employees = response.json()

        for employee in employees:
            self.tree.insert('', 'end', values=(
                employee['id'],
                employee['name'],
                employee['position'],
                employee['hours_worked'],
                employee['net_salary']
            ))

if __name__ == '__main__':
    root = tk.Tk()
    app = SalaryManagementSystem(root)
    root.mainloop()
